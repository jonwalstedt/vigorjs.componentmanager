// Generated by CoffeeScript 1.9.1
var MockComponent, MockComponent2, Vigor, __testOnly, assert, clock, componentManager, sinon;

assert = require('assert');

sinon = require('sinon');

Vigor = require('../../dist/vigor.componentmanager');

componentManager = new Vigor.ComponentManager();

__testOnly = Vigor.ComponentManager.__testOnly;

clock = void 0;

MockComponent = (function() {
  MockComponent.prototype.$el = void 0;

  MockComponent.prototype.attr = void 0;

  function MockComponent(attr) {
    this.attr = attr;
    this.$el = $('<div clas="mock-component"></div>');
  }

  MockComponent.prototype.render = function() {
    return this;
  };

  return MockComponent;

})();

MockComponent2 = (function() {
  MockComponent2.prototype.$el = void 0;

  MockComponent2.prototype.attr = void 0;

  function MockComponent2(attr) {
    this.attr = attr;
    this.$el = $('<div clas="mock-component2"></div>');
  }

  MockComponent2.prototype.render = function() {
    return this;
  };

  return MockComponent2;

})();

window.MockComponent = MockComponent;

window.MockComponent2 = MockComponent;

describe('The componentManager', function() {
  var sandbox;
  sandbox = void 0;
  beforeEach(function() {
    sandbox = sinon.sandbox.create();
    return clock = sinon.useFakeTimers();
  });
  afterEach(function() {
    componentManager.dispose();
    sandbox.restore();
    return clock.restore();
  });
  describe('ComponentManagers prototype extends', function() {
    return it('underscore events', function() {
      assert(Vigor.ComponentManager.prototype.on);
      assert(Vigor.ComponentManager.prototype.off);
      assert(Vigor.ComponentManager.prototype.once);
      assert(Vigor.ComponentManager.prototype.listenTo);
      assert(Vigor.ComponentManager.prototype.listenToOnce);
      assert(Vigor.ComponentManager.prototype.bind);
      assert(Vigor.ComponentManager.prototype.unbind);
      assert(Vigor.ComponentManager.prototype.trigger);
      return assert(Vigor.ComponentManager.prototype.stopListening);
    });
  });
  describe('public methods', function() {
    describe('initialize', function() {
      it('instantiate necessary collections and models', function() {
        assert.equal(componentManager._componentDefinitionsCollection, void 0);
        assert.equal(componentManager._instanceDefinitionsCollection, void 0);
        assert.equal(componentManager._activeInstancesCollection, void 0);
        assert.equal(componentManager._globalConditionsModel, void 0);
        assert.equal(componentManager._filterModel, void 0);
        componentManager.initialize();
        assert(componentManager._componentDefinitionsCollection);
        assert(componentManager._instanceDefinitionsCollection);
        assert(componentManager._activeInstancesCollection);
        assert(componentManager._globalConditionsModel);
        return assert(componentManager._filterModel);
      });
      it('should call setComponentClassName', function() {
        var setComponentClassName;
        setComponentClassName = sandbox.spy(componentManager, 'setComponentClassName');
        componentManager.initialize();
        return assert(setComponentClassName.called);
      });
      it('should call setTargetPrefix', function() {
        var setTargetPrefix;
        setTargetPrefix = sandbox.spy(componentManager, 'setTargetPrefix');
        componentManager.initialize();
        return assert(setTargetPrefix.called);
      });
      it('should call addListeners', function() {
        var addListeners;
        addListeners = sandbox.spy(componentManager, 'addListeners');
        componentManager.initialize();
        return assert(addListeners.called);
      });
      it('should call _parse with passed settings', function() {
        var parseSpy, settings;
        settings = {
          targetPrefix: 'dummy-prefix'
        };
        parseSpy = sandbox.spy(componentManager, '_parse');
        componentManager.initialize(settings);
        return assert(parseSpy.calledWith(settings));
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.initialize();
        return assert.equal(cm, componentManager);
      });
    });
    describe('updateSettings', function() {
      it('should call _parse with passed settings', function() {
        var parseSpy, settings;
        settings = {
          targetPrefix: 'dummy-prefix'
        };
        parseSpy = sandbox.stub(componentManager, '_parse');
        componentManager.updateSettings(settings);
        return assert(parseSpy.calledWith(settings));
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.updateSettings();
        return assert.equal(cm, componentManager);
      });
    });
    describe('refresh', function() {
      it('should set and parse the filterOptions if passed', function() {
        var filterModelParse, filterModelSet, filterOptions, parsedFilterOptions;
        filterOptions = {
          url: 'foo'
        };
        componentManager.initialize();
        parsedFilterOptions = componentManager._filterModel.parse(filterOptions);
        filterModelSet = sandbox.stub(componentManager._filterModel, 'set');
        filterModelParse = sandbox.spy(componentManager._filterModel, 'parse');
        componentManager.refresh(filterOptions);
        assert(filterModelParse.calledWith(filterOptions));
        return assert(filterModelSet.calledWith(parsedFilterOptions));
      });
      it('clear the filterModel and update activeComponents if no filterOptions was passed', function() {
        var filterModelClear, updateActiveComponents;
        componentManager.initialize();
        filterModelClear = sandbox.spy(componentManager._filterModel, 'clear');
        updateActiveComponents = sandbox.spy(componentManager, '_updateActiveComponents');
        componentManager.refresh();
        assert(filterModelClear.called);
        return assert(updateActiveComponents.called);
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        componentManager.initialize();
        cm = componentManager.refresh();
        return assert.equal(cm, componentManager);
      });
    });
    describe('serialize', function() {
      return it('should call _serialize', function() {
        var serializeStub;
        serializeStub = sandbox.stub(componentManager, 'serialize');
        componentManager.serialize();
        return assert(serializeStub.called);
      });
    });
    describe('parse', function() {
      var expectedResults, settings;
      settings = {
        componentClassName: 'test-class-name',
        $context: $('<div class="test"></div>'),
        targetPrefix: 'test-prefix',
        componentSettings: {
          conditions: {
            'test-condition': false
          },
          hidden: [],
          components: [
            {
              id: 'mock-component',
              src: 'window.MockComponent'
            }
          ],
          instances: [
            {
              id: 'instance-1',
              componentId: 'mock-component',
              targetName: 'test-prefix--header'
            }, {
              id: 'instance-2',
              componentId: 'mock-component',
              targetName: 'test-prefix--main'
            }
          ]
        }
      };
      expectedResults = {
        componentClassName: 'test-class-name',
        $context: 'div.test',
        targetPrefix: 'test-prefix',
        componentSettings: {
          conditions: {
            'test-condition': false
          },
          hidden: [],
          components: [
            {
              id: 'mock-component',
              src: 'window.MockComponent'
            }
          ],
          instances: [
            {
              id: 'instance-1',
              componentId: 'mock-component',
              targetName: 'test-prefix--header',
              reInstantiateOnUrlParamChange: false,
              showCount: 0
            }, {
              id: 'instance-2',
              componentId: 'mock-component',
              targetName: 'test-prefix--main',
              reInstantiateOnUrlParamChange: false,
              showCount: 0
            }
          ]
        }
      };
      it('should be able to parse the output of serialize back into usable settings', function() {
        var i, instance, len, ref, results, serializedResults;
        serializedResults = componentManager.initialize(settings).serialize();
        results = componentManager.parse(serializedResults);
        ref = results.componentSettings.instances;
        for (i = 0, len = ref.length; i < len; i++) {
          instance = ref[i];
          delete instance.urlParamsModel;
        }
        return assert.deepEqual(results, expectedResults);
      });
      it('should be able to parse settings that contains methods as condition', function() {
        var conditionResult, i, instance, len, ref, results, serializedResults;
        settings.componentSettings.conditions = {
          dummyCondition: function() {
            if (500 > 400) {
              return 30;
            }
          }
        };
        serializedResults = componentManager.initialize(settings).serialize();
        results = componentManager.parse(serializedResults);
        conditionResult = results.componentSettings.conditions.dummyCondition();
        ref = results.componentSettings.instances;
        for (i = 0, len = ref.length; i < len; i++) {
          instance = ref[i];
          delete instance.urlParamsModel;
        }
        delete expectedResults.componentSettings.conditions;
        delete results.componentSettings.conditions;
        assert.deepEqual(results, expectedResults);
        return assert.equal(conditionResult, 30);
      });
      return it('should call updateSettings if second param is true', function() {
        var serializedResults, updateSettings, updateSettingsStub;
        updateSettings = true;
        updateSettingsStub = sandbox.stub(componentManager, 'updateSettings');
        serializedResults = componentManager.initialize(settings).serialize();
        componentManager.parse(serializedResults, updateSettings);
        return assert(updateSettingsStub.called);
      });
    });
    describe('clear', function() {
      beforeEach(function() {
        var settings;
        $('body').append('<div class="clear-test"></div>');
        $('.clear-test').append('<div class="test-prefix--header"></div>');
        settings = {
          componentClassName: 'test-class-name',
          $context: '.clear-test',
          targetPrefix: 'test-prefix',
          componentSettings: {
            conditions: {
              'test-condition': false
            },
            hidden: [],
            components: [
              {
                id: 'mock-component',
                src: 'window.MockComponent'
              }
            ],
            instances: [
              {
                id: 'instance-1',
                urlPattern: 'foo/:id',
                componentId: 'mock-component',
                targetName: 'test-prefix--header'
              }, {
                id: 'instance-2',
                urlPattern: 'bar/:id',
                componentId: 'mock-component',
                targetName: 'test-prefix--main'
              }
            ]
          }
        };
        return componentManager.initialize(settings);
      });
      afterEach(function() {
        componentManager.dispose();
        return $('.clear-test').remove();
      });
      it('should remove all components', function() {
        var components;
        components = componentManager.getComponents();
        assert.equal(components.length, 1);
        componentManager.clear();
        components = componentManager.getComponents();
        return assert.equal(components.length, 0);
      });
      it('should remove all instances', function() {
        var components;
        components = componentManager.getInstances();
        assert.equal(components.length, 2);
        componentManager.clear();
        components = componentManager.getInstances();
        return assert.equal(components.length, 0);
      });
      it('should remove all activeComponents', function() {
        var instances;
        componentManager.refresh({
          url: 'foo/1'
        });
        instances = componentManager.getActiveInstances();
        assert.equal(instances.length, 1);
        componentManager.clear();
        instances = componentManager.getInstances();
        return assert.equal(instances.length, 0);
      });
      it('should remove all filters', function() {
        var expectedResults, filter;
        componentManager.refresh({
          url: 'foo/1'
        });
        filter = componentManager.getActiveFilter();
        expectedResults = {
          url: 'foo/1',
          includeIfStringMatches: void 0,
          hasToMatchString: void 0,
          cantMatchString: void 0
        };
        assert.deepEqual(filter, expectedResults);
        componentManager.clear();
        filter = componentManager.getActiveFilter();
        expectedResults = {};
        filter = componentManager.getActiveFilter();
        return assert.deepEqual(filter, expectedResults);
      });
      it('should clear all global conditions', function() {
        var condition, globalCondition;
        condition = componentManager.getConditions();
        globalCondition = {
          'test-condition': false
        };
        assert.deepEqual(condition, globalCondition);
        componentManager.clear();
        condition = componentManager.getConditions();
        return assert.deepEqual(condition, {});
      });
      it('should clear the context', function() {
        var $context;
        $context = componentManager.getContext();
        assert.equal($context.length, 1);
        componentManager.clear();
        $context = componentManager.getContext();
        return assert.deepEqual($context, void 0);
      });
      it('should reset the componentClassName to the default', function() {
        var componentClassName;
        componentClassName = componentManager.getComponentClassName();
        assert.equal(componentClassName, 'test-class-name');
        componentManager.clear();
        componentClassName = componentManager.getComponentClassName();
        return assert.equal(componentClassName, 'vigor-component');
      });
      it('should reset the targetPrefix to the default', function() {
        var targetPrefix;
        targetPrefix = componentManager.getTargetPrefix();
        assert.equal(targetPrefix, 'test-prefix');
        componentManager.clear();
        targetPrefix = componentManager.getTargetPrefix();
        return assert.equal(targetPrefix, 'component-area');
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.clear();
        return assert.equal(cm, componentManager);
      });
    });
    describe('dispose', function() {
      it('should call clear', function() {
        sandbox.spy(componentManager, 'clear');
        componentManager.dispose();
        return assert(componentManager.clear.called);
      });
      it('should call removeListeners', function() {
        sandbox.spy(componentManager, 'removeListeners');
        componentManager.dispose();
        return assert(componentManager.removeListeners.called);
      });
      return it('should set class instances to undefined', function() {
        componentManager.initialize();
        assert(componentManager._componentDefinitionsCollection);
        assert(componentManager._instanceDefinitionsCollection);
        assert(componentManager._activeInstancesCollection);
        assert(componentManager._globalConditionsModel);
        assert(componentManager._filterModel);
        componentManager.dispose();
        assert.equal(componentManager._componentDefinitionsCollection, void 0);
        assert.equal(componentManager._instanceDefinitionsCollection, void 0);
        assert.equal(componentManager._activeInstancesCollection, void 0);
        assert.equal(componentManager._globalConditionsModel, void 0);
        return assert.equal(componentManager._filterModel, void 0);
      });
    });
    describe('addListeners', function() {
      beforeEach(function() {
        componentManager._componentDefinitionsCollection = new __testOnly.ComponentDefinitionsCollection();
        componentManager._instanceDefinitionsCollection = new __testOnly.InstanceDefinitionsCollection();
        componentManager._activeInstancesCollection = new __testOnly.ActiveInstancesCollection();
        componentManager._globalConditionsModel = new Backbone.Model();
        return componentManager._filterModel = new __testOnly.FilterModel();
      });
      it('should add a change listener on the filter model with _updateActiveComponents as callback', function() {
        var filterModelOnSpy, updateActiveComponentsSpy;
        filterModelOnSpy = sandbox.spy(componentManager._filterModel, 'on');
        updateActiveComponentsSpy = sandbox.spy(componentManager, '_updateActiveComponents');
        componentManager.addListeners();
        assert(filterModelOnSpy.calledWith('change', componentManager._updateActiveComponents));
        componentManager._filterModel.trigger('change');
        return assert(updateActiveComponentsSpy.called);
      });
      it('should add a throttled_diff listener on the _componentDefinitionsCollection with _updateActiveComponents as callback', function() {
        var componentDefinitionsCollectionOnSpy, updateActiveComponentsSpy;
        componentDefinitionsCollectionOnSpy = sandbox.spy(componentManager._componentDefinitionsCollection, 'on');
        updateActiveComponentsSpy = sandbox.spy(componentManager, '_updateActiveComponents');
        componentManager.addListeners();
        assert(componentDefinitionsCollectionOnSpy.calledWith('throttled_diff', componentManager._updateActiveComponents));
        componentManager._componentDefinitionsCollection.trigger('change', new Backbone.Model());
        assert.equal(updateActiveComponentsSpy.called, false);
        clock.tick(51);
        return assert(updateActiveComponentsSpy.called);
      });
      it('should add a throttled_diff listener on the _instanceDefinitionsCollection with _updateActiveComponents as callback', function() {
        var instanceDefinitionsCollectionOnSpy, updateActiveComponentsSpy;
        instanceDefinitionsCollectionOnSpy = sandbox.spy(componentManager._instanceDefinitionsCollection, 'on');
        updateActiveComponentsSpy = sandbox.spy(componentManager, '_updateActiveComponents');
        componentManager.addListeners();
        assert(instanceDefinitionsCollectionOnSpy.calledWith('throttled_diff', componentManager._updateActiveComponents));
        componentManager._instanceDefinitionsCollection.trigger('change', new Backbone.Model());
        assert.equal(updateActiveComponentsSpy.called, false);
        clock.tick(51);
        return assert(updateActiveComponentsSpy.called);
      });
      it('should add a change listener on the gobal conditions model with _updateActiveComponents as callback', function() {
        var globalConditionsModelOnSpy, updateActiveComponentsSpy;
        globalConditionsModelOnSpy = sandbox.spy(componentManager._globalConditionsModel, 'on');
        updateActiveComponentsSpy = sandbox.spy(componentManager, '_updateActiveComponents');
        componentManager.addListeners();
        assert(globalConditionsModelOnSpy.calledWith('change', componentManager._updateActiveComponents));
        componentManager._globalConditionsModel.trigger('change');
        return assert(updateActiveComponentsSpy.called);
      });
      it('should add a add listener on the _activeInstancesCollection with _onActiveInstanceAdd as callback', function() {
        var activeInstancesCollectionOnSpy, onActiveInstanceAddSpy;
        activeInstancesCollectionOnSpy = sandbox.spy(componentManager._activeInstancesCollection, 'on');
        onActiveInstanceAddSpy = sandbox.stub(componentManager, '_onActiveInstanceAdd');
        componentManager.addListeners();
        assert(activeInstancesCollectionOnSpy.calledWith('add', componentManager._onActiveInstanceAdd));
        componentManager._activeInstancesCollection.add(new Backbone.Model());
        return assert(onActiveInstanceAddSpy.called);
      });
      it('should add change listeners on these params on the _activeInstancesCollection: componentId, filterString, conditions, args, showCount, urlPattern, urlParams, reInstantiateOnUrlParamChange with _onActiveInstanceChange as callback', function() {
        var activeInstancesCollectionOnSpy, changes, onActiveInstanceChangeSpy;
        activeInstancesCollectionOnSpy = sandbox.spy(componentManager._activeInstancesCollection, 'on');
        onActiveInstanceChangeSpy = sandbox.stub(componentManager, '_onActiveInstanceChange');
        componentManager.addListeners();
        changes = 'change:componentId change:filterString change:conditions change:args change:showCount change:urlPattern change:urlParams change:reInstantiateOnUrlParamChange';
        assert(activeInstancesCollectionOnSpy.calledWith(changes, componentManager._onActiveInstanceChange));
        componentManager._activeInstancesCollection.trigger('change:componentId', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        onActiveInstanceChangeSpy.reset();
        componentManager._activeInstancesCollection.trigger('change:filterString', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        onActiveInstanceChangeSpy.reset();
        componentManager._activeInstancesCollection.trigger('change:conditions', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        onActiveInstanceChangeSpy.reset();
        componentManager._activeInstancesCollection.trigger('change:args', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        onActiveInstanceChangeSpy.reset();
        componentManager._activeInstancesCollection.trigger('change:showCount', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        onActiveInstanceChangeSpy.reset();
        componentManager._activeInstancesCollection.trigger('change:urlPattern', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        onActiveInstanceChangeSpy.reset();
        componentManager._activeInstancesCollection.trigger('change:urlParams', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        onActiveInstanceChangeSpy.reset();
        componentManager._activeInstancesCollection.trigger('change:reInstantiateOnUrlParamChange', new Backbone.Model());
        assert(onActiveInstanceChangeSpy.called);
        return onActiveInstanceChangeSpy.reset();
      });
      it('should add a change:order listener on the _activeInstancesCollection with _onActiveInstanceOrderChange as callback', function() {
        var activeInstancesCollectionOnSpy, onActiveInstanceOrderSpy;
        activeInstancesCollectionOnSpy = sandbox.spy(componentManager._activeInstancesCollection, 'on');
        onActiveInstanceOrderSpy = sandbox.stub(componentManager, '_onActiveInstanceOrderChange');
        componentManager.addListeners();
        assert(activeInstancesCollectionOnSpy.calledWith('change:order', componentManager._onActiveInstanceOrderChange));
        componentManager._activeInstancesCollection.trigger('change:order', new Backbone.Model());
        return assert(onActiveInstanceOrderSpy.called);
      });
      it('should add a change:targetName listener on the _activeInstancesCollection with _onActiveInstanceTargetNameChange as callback', function() {
        var activeInstancesCollectionOnSpy, onActiveInstanceTargetNameChangeSpy;
        activeInstancesCollectionOnSpy = sandbox.spy(componentManager._activeInstancesCollection, 'on');
        onActiveInstanceTargetNameChangeSpy = sandbox.stub(componentManager, '_onActiveInstanceTargetNameChange');
        componentManager.addListeners();
        assert(activeInstancesCollectionOnSpy.calledWith('change:targetName', componentManager._onActiveInstanceTargetNameChange));
        componentManager._activeInstancesCollection.trigger('change:targetName', new Backbone.Model());
        return assert(onActiveInstanceTargetNameChangeSpy.called);
      });
      it('should add a change:remove listener on the _activeInstancesCollection with _onActiveInstanceRemoved as callback', function() {
        var activeInstancesCollectionOnSpy, onActiveInstanceRemovedSpy;
        activeInstancesCollectionOnSpy = sandbox.spy(componentManager._activeInstancesCollection, 'on');
        onActiveInstanceRemovedSpy = sandbox.stub(componentManager, '_onActiveInstanceRemoved');
        sandbox.stub(componentManager, '_onActiveInstanceAdd', function() {});
        componentManager.addListeners();
        assert(activeInstancesCollectionOnSpy.calledWith('remove', componentManager._onActiveInstanceRemoved));
        componentManager._activeInstancesCollection.add({
          id: 'dummy'
        });
        componentManager._activeInstancesCollection.remove('dummy');
        return assert(onActiveInstanceRemovedSpy.called);
      });
      it('should proxy add events from the _componentDefinitionsCollection (EVENTS.COMPONENT_ADD)', function() {
        var componentAddSpy;
        componentAddSpy = sandbox.spy();
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.COMPONENT_ADD, componentAddSpy);
        componentManager._componentDefinitionsCollection.add(new Backbone.Model());
        return assert(componentAddSpy.called);
      });
      it('should proxy change events from the _componentDefinitionsCollection (EVENTS.COMPONENT_CHANGE)', function() {
        var componentChangeSpy;
        componentChangeSpy = sandbox.spy();
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.COMPONENT_CHANGE, componentChangeSpy);
        componentManager._componentDefinitionsCollection.trigger('change', new Backbone.Model());
        return assert(componentChangeSpy.called);
      });
      it('should proxy remove events from the _componentDefinitionsCollection (EVENTS.COMPONENT_REMOVE)', function() {
        var componentRemoveSpy;
        componentRemoveSpy = sandbox.spy();
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.COMPONENT_REMOVE, componentRemoveSpy);
        componentManager._componentDefinitionsCollection.trigger('remove', new Backbone.Model(), componentManager._componentDefinitionsCollection);
        return assert(componentRemoveSpy.called);
      });
      it('should proxy add events from the _instanceDefinitionsCollection (EVENTS.INSTANCE_ADD)', function() {
        var instanceAddSpy;
        instanceAddSpy = sandbox.spy();
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.INSTANCE_ADD, instanceAddSpy);
        componentManager._instanceDefinitionsCollection.add(new Backbone.Model());
        return assert(instanceAddSpy.called);
      });
      it('should proxy change events from the _instanceDefinitionsCollection (EVENTS.INSTANCE_CHANGE)', function() {
        var instanceChangeSpy;
        instanceChangeSpy = sandbox.spy();
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.INSTANCE_CHANGE, instanceChangeSpy);
        componentManager._instanceDefinitionsCollection.trigger('change', new Backbone.Model());
        return assert(instanceChangeSpy.called);
      });
      it('should proxy remove events from the _instanceDefinitionsCollection (EVENTS.INSTANCE_REMOVE)', function() {
        var instanceRemoveSpy;
        instanceRemoveSpy = sandbox.spy();
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.INSTANCE_REMOVE, instanceRemoveSpy);
        componentManager._instanceDefinitionsCollection.trigger('remove', new Backbone.Model(), componentManager._instanceDefinitionsCollection);
        return assert(instanceRemoveSpy.called);
      });
      it('should proxy add events from the _activeInstancesCollection (EVENTS.ADD)', function() {
        var addSpy;
        addSpy = sandbox.spy();
        sandbox.stub(componentManager, '_onActiveInstanceAdd');
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.ADD, addSpy);
        componentManager._activeInstancesCollection.add(new Backbone.Model());
        return assert(addSpy.called);
      });
      it('should proxy change events from the _activeInstancesCollection (EVENTS.CHANGE)', function() {
        var changeSpy;
        changeSpy = sandbox.spy();
        sandbox.stub(componentManager, '_onActiveInstanceChange');
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.CHANGE, changeSpy);
        componentManager._activeInstancesCollection.trigger('change', new Backbone.Model());
        return assert(changeSpy.called);
      });
      it('should proxy remove events from the _activeInstancesCollection (EVENTS.REMOVE)', function() {
        var removeSpy;
        removeSpy = sandbox.spy();
        sandbox.stub(componentManager, '_onActiveInstanceRemoved');
        componentManager.addListeners();
        componentManager.on(componentManager.EVENTS.REMOVE, removeSpy);
        componentManager._activeInstancesCollection.trigger('remove', new Backbone.Model(), componentManager._activeInstancesCollection);
        return assert(removeSpy.called);
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.addListeners();
        return assert.equal(cm, componentManager);
      });
    });
    describe('addConditions', function() {
      it('should register new conditions', function() {
        var conditions, globalConditionsSetSpy;
        componentManager.initialize();
        globalConditionsSetSpy = sandbox.spy(componentManager._globalConditionsModel, 'set');
        conditions = {
          foo: function() {
            return false;
          },
          bar: function() {
            return true;
          }
        };
        componentManager.addConditions(conditions);
        assert(globalConditionsSetSpy.calledWith(conditions, {
          silent: false
        }));
        return assert.deepEqual(componentManager._globalConditionsModel.attributes, conditions);
      });
      it('should not remove old conditions', function() {
        var conditions, expectedResults, secondCondition, silent;
        conditions = {
          foo: false,
          bar: true
        };
        secondCondition = {
          baz: 'qux'
        };
        expectedResults = {
          foo: false,
          bar: true,
          baz: 'qux'
        };
        silent = true;
        componentManager.initialize();
        componentManager.addConditions(conditions, silent);
        componentManager.addConditions(secondCondition);
        return assert.deepEqual(componentManager._globalConditionsModel.attributes, expectedResults);
      });
      it('should update existing conditions', function() {
        var conditions, expectedResults, updatedCondition;
        conditions = {
          foo: false,
          bar: true
        };
        updatedCondition = {
          foo: true
        };
        expectedResults = {
          foo: true,
          bar: true
        };
        componentManager.initialize();
        componentManager.addConditions(conditions);
        assert.deepEqual(componentManager._globalConditionsModel.attributes, conditions);
        componentManager.addConditions(updatedCondition);
        return assert.deepEqual(componentManager._globalConditionsModel.attributes, expectedResults);
      });
      it('should throw an CONDITION.WRONG_FORMAT error if condition is not an object', function() {
        var conditionInWrongFormat, errorFn;
        conditionInWrongFormat = 'string';
        errorFn = function() {
          return componentManager.addConditions(conditionInWrongFormat);
        };
        return assert.throws((function() {
          return errorFn();
        }), /condition has to be an object with key value pairs/);
      });
      return it('should return the componentManager for chainability', function() {
        var cm, conditions;
        conditions = {
          foo: function() {
            return false;
          },
          bar: function() {
            return true;
          }
        };
        cm = componentManager.initialize().addConditions(conditions);
        return assert.equal(cm, componentManager);
      });
    });
    describe('addComponents', function() {
      it('should call set on _componentDefinitionsCollection with passed definitions and parse: true, validate: true and remove: false', function() {
        var component, componentDefinitionsCollectionSetSpy;
        component = {
          id: 'dummy-component',
          src: 'http://www.google.com'
        };
        componentManager.initialize();
        componentDefinitionsCollectionSetSpy = sandbox.spy(componentManager._componentDefinitionsCollection, 'set');
        componentManager.addComponents(component);
        return assert(componentDefinitionsCollectionSetSpy.calledWith(component, {
          parse: true,
          validate: true,
          remove: false
        }));
      });
      it('should be able to add an array of components', function() {
        var components;
        components = [
          {
            id: 'dummy-component',
            src: 'http://www.google.com'
          }, {
            id: 'dummy-component2',
            src: 'http://www.wikipedia.com'
          }
        ];
        componentManager.initialize();
        assert.equal(componentManager._componentDefinitionsCollection.toJSON().length, 0);
        componentManager.addComponents(components);
        return assert.equal(componentManager._componentDefinitionsCollection.toJSON().length, 2);
      });
      return it('should return the componentManager for chainability', function() {
        var cm, component;
        component = {
          id: 'dummy-component',
          src: 'http://www.google.com'
        };
        cm = componentManager.initialize().addComponents(component);
        return assert.equal(cm, componentManager);
      });
    });
    describe('addInstance', function() {
      it('should call set on _instanceDefinitionsCollection with passed definitions and parse: true, validate: true and remove: false', function() {
        var instance, instanceDefinitionsCollectionSetSpy;
        instance = {
          id: 'dummy-instance',
          componentId: 'dummy-component',
          targetName: 'body'
        };
        componentManager.initialize();
        instanceDefinitionsCollectionSetSpy = sandbox.spy(componentManager._instanceDefinitionsCollection, 'set');
        componentManager.addInstances(instance);
        return assert(instanceDefinitionsCollectionSetSpy.calledWith(instance, {
          parse: true,
          validate: true,
          remove: false
        }));
      });
      it('should be able to add an array of instances', function() {
        var instances;
        instances = [
          {
            id: 'dummy-instance',
            componentId: 'dummy-component',
            targetName: 'body'
          }, {
            id: 'dummy-instance2',
            componentId: 'dummy-component2',
            targetName: 'body'
          }
        ];
        componentManager.initialize();
        assert.equal(componentManager._instanceDefinitionsCollection.toJSON().length, 0);
        componentManager.addInstances(instances);
        return assert.equal(componentManager._instanceDefinitionsCollection.toJSON().length, 2);
      });
      return it('should return the componentManager for chainability', function() {
        var cm, instance;
        instance = {
          id: 'dummy-instance',
          componentId: 'dummy-component',
          targetName: 'body'
        };
        cm = componentManager.initialize().addInstances(instance);
        return assert.equal(cm, componentManager);
      });
    });
    describe('updateComponents', function() {
      it('should call addComponents with passed componentDefinitions', function() {
        var addComponentsSpy, component;
        component = {
          id: 'dummy-component',
          src: 'http://www.google.com'
        };
        componentManager.initialize();
        addComponentsSpy = sandbox.spy(componentManager, 'addComponents');
        componentManager.updateComponents(component);
        return assert(addComponentsSpy.calledWith(component));
      });
      it('should update a specific component with new data', function() {
        var components, updatedComponent;
        components = [
          {
            id: 'dummy-component',
            src: 'http://www.google.com'
          }, {
            id: 'dummy-component2',
            src: 'http://www.wikipedia.com'
          }
        ];
        updatedComponent = {
          id: 'dummy-component',
          src: 'http://www.wikipedia.com'
        };
        componentManager.initialize();
        componentManager.addComponents(components);
        assert.equal(componentManager._componentDefinitionsCollection.get('dummy-component').toJSON().src, 'http://www.google.com');
        componentManager.updateComponents(updatedComponent);
        return assert.equal(componentManager._componentDefinitionsCollection.get('dummy-component').toJSON().src, 'http://www.wikipedia.com');
      });
      return it('should return the componentManager for chainability', function() {
        var cm, component;
        component = {
          id: 'dummy-component',
          src: 'http://www.google.com'
        };
        cm = componentManager.initialize().updateComponents(component);
        return assert.equal(cm, componentManager);
      });
    });
    describe('updateInstances', function() {
      it('should call addInstances with passed instanceDefinitions', function() {
        var addInstancesSpy, instance;
        instance = {
          id: 'dummy-instance',
          componentId: 'dummy-component',
          targetName: 'body'
        };
        componentManager.initialize();
        addInstancesSpy = sandbox.spy(componentManager, 'addInstances');
        componentManager.updateInstances(instance);
        return assert(addInstancesSpy.calledWith(instance));
      });
      it('should update a specific instance with new data', function() {
        var instances, updatedInstance;
        instances = [
          {
            id: 'dummy-instance',
            componentId: 'dummy-component',
            targetName: 'body'
          }, {
            id: 'dummy-instance2',
            componentId: 'dummy-component2',
            targetName: 'body'
          }
        ];
        updatedInstance = {
          id: 'dummy-instance',
          targetName: '.header'
        };
        componentManager.initialize();
        componentManager.addInstances(instances);
        assert.equal(componentManager._instanceDefinitionsCollection.get('dummy-instance').toJSON().targetName, 'body');
        componentManager.updateInstances(updatedInstance);
        return assert.equal(componentManager._instanceDefinitionsCollection.get('dummy-instance').toJSON().targetName, '.header');
      });
      return it('should return the componentManager for chainability', function() {
        var cm, instance;
        instance = {
          id: 'dummy-instance',
          componentId: 'dummy-component',
          targetName: 'body'
        };
        cm = componentManager.initialize().updateInstances(instance);
        return assert.equal(cm, componentManager);
      });
    });
    describe('removeComponent', function() {
      it('should call remove on the _componentDefinitionsCollection with passed componentDefinitionId', function() {
        var componentId, removeComponentsSpy;
        componentId = 'dummy-component';
        componentManager.initialize();
        removeComponentsSpy = sandbox.spy(componentManager._componentDefinitionsCollection, 'remove');
        componentManager.removeComponent(componentId);
        return assert(removeComponentsSpy.calledWith(componentId));
      });
      it('should remove a specific component', function() {
        var components;
        components = [
          {
            id: 'dummy-component',
            src: 'http://www.google.com'
          }, {
            id: 'dummy-component2',
            src: 'http://www.wikipedia.com'
          }
        ];
        componentManager.initialize();
        componentManager.addComponents(components);
        assert.equal(componentManager._componentDefinitionsCollection.length, 2);
        componentManager.removeComponent(components[0].id);
        assert.equal(componentManager._componentDefinitionsCollection.length, 1);
        return assert.equal(componentManager._componentDefinitionsCollection.toJSON()[0].id, 'dummy-component2');
      });
      return it('should return the componentManager for chainability', function() {
        var cm, componentId;
        componentId = 'dummy-component';
        cm = componentManager.initialize().removeComponent(componentId);
        return assert.equal(cm, componentManager);
      });
    });
    describe('removeInstance', function() {
      it('should call remove on the _instanceDefinitionsCollection with passed instanceDefinitionId', function() {
        var instanceId, removeInstanceSpy;
        instanceId = 'dummy-instance';
        componentManager.initialize();
        removeInstanceSpy = sandbox.spy(componentManager._instanceDefinitionsCollection, 'remove');
        componentManager.removeInstance(instanceId);
        return assert(removeInstanceSpy.calledWith(instanceId));
      });
      it('should remove a specific instance', function() {
        var instances;
        instances = [
          {
            id: 'dummy-instance',
            componentId: 'dummy-component',
            targetName: 'body'
          }, {
            id: 'dummy-instance2',
            componentId: 'dummy-component2',
            targetName: 'body'
          }
        ];
        componentManager.initialize();
        componentManager.addInstances(instances);
        assert.equal(componentManager._instanceDefinitionsCollection.length, 2);
        componentManager.removeInstance(instances[0].id);
        assert.equal(componentManager._instanceDefinitionsCollection.length, 1);
        return assert.equal(componentManager._instanceDefinitionsCollection.toJSON()[0].id, 'dummy-instance2');
      });
      return it('should return the componentManager for chainability', function() {
        var cm, instanceId;
        instanceId = 'dummy-instance';
        cm = componentManager.initialize().removeInstance(instanceId);
        return assert.equal(cm, componentManager);
      });
    });
    describe('removeListeners', function() {
      it('should call off on used collections and models', function() {
        var activeInstancesCollectionOffSpy, componentdefinitionsCollectionOffSpy, filterModelOffSpy, globalConditionsModelOffSpy, instanceDefinitionsCollectionOffSpy;
        componentManager.initialize();
        activeInstancesCollectionOffSpy = sandbox.spy(componentManager._activeInstancesCollection, 'off');
        filterModelOffSpy = sandbox.spy(componentManager._filterModel, 'off');
        instanceDefinitionsCollectionOffSpy = sandbox.spy(componentManager._instanceDefinitionsCollection, 'off');
        componentdefinitionsCollectionOffSpy = sandbox.spy(componentManager._componentDefinitionsCollection, 'off');
        globalConditionsModelOffSpy = sandbox.spy(componentManager._globalConditionsModel, 'off');
        componentManager.removeListeners();
        assert(activeInstancesCollectionOffSpy.called);
        assert(filterModelOffSpy.called);
        assert(instanceDefinitionsCollectionOffSpy.called);
        assert(componentdefinitionsCollectionOffSpy.called);
        return assert(globalConditionsModelOffSpy.called);
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.removeListeners();
        return assert.equal(cm, componentManager);
      });
    });
    describe('setContext', function() {
      it('should save the passed context', function() {
        var $context;
        $context = $('<div/>');
        componentManager.setContext($context);
        return assert.equal(componentManager._$context, $context);
      });
      it('should save the passed context as a jQuery object if passing a string (using the string as a selector)', function() {
        var $context;
        $context = '.test';
        componentManager.setContext($context);
        return assert.deepEqual(componentManager._$context, $('.test'));
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.setContext();
        return assert.equal(cm, componentManager);
      });
    });
    describe('setComponentClassName', function() {
      it('should save the componentClassName', function() {
        var componentClassName;
        componentClassName = 'dummy-class-name';
        componentManager.setComponentClassName(componentClassName);
        return assert.equal(componentManager._componentClassName, componentClassName);
      });
      it('should use default componentClassName if method is called without passing a new name', function() {
        var componentClassName;
        componentClassName = 'dummy-class-name';
        componentManager.setComponentClassName(componentClassName);
        assert.equal(componentManager._componentClassName, componentClassName);
        componentManager.setComponentClassName();
        return assert.equal(componentManager._componentClassName, 'vigor-component');
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.setComponentClassName();
        return assert.equal(cm, componentManager);
      });
    });
    describe('setTargetPrefix', function() {
      it('should store the target prefix', function() {
        var targetPrefix;
        targetPrefix = 'dummy-prefix';
        componentManager.setTargetPrefix(targetPrefix);
        return assert.equal(componentManager._targetPrefix, targetPrefix);
      });
      it('should use default target prefix if method is called without passing a new prefix', function() {
        var targetPrefix;
        targetPrefix = 'dummy-prefix';
        componentManager.setTargetPrefix(targetPrefix);
        assert.equal(componentManager._targetPrefix, targetPrefix);
        componentManager.setTargetPrefix();
        return assert.equal(componentManager._targetPrefix, 'component-area');
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager.setTargetPrefix();
        return assert.equal(cm, componentManager);
      });
    });
    describe('getContext', function() {
      return it('should return the context', function() {
        var $context, result;
        $context = $('<div/>');
        componentManager.setContext($context);
        result = componentManager.getContext();
        return assert.equal(result, $context);
      });
    });
    describe('getComponentClassName', function() {
      return it('should return the componentClassName', function() {
        var componentClassName, result;
        componentClassName = 'dummy-class-name';
        componentManager.setComponentClassName(componentClassName);
        result = componentManager.getComponentClassName();
        return assert.equal(result, componentClassName);
      });
    });
    describe('getTargetPrefix', function() {
      return it('should return a specified prefix or the default prefix', function() {
        var result, targetPrefix;
        targetPrefix = 'dummy-prefix';
        componentManager.setTargetPrefix(targetPrefix);
        result = componentManager.getTargetPrefix();
        return assert.equal(result, targetPrefix);
      });
    });
    describe('getActiveFilter', function() {
      return it('should return currently applied filters', function() {
        var activeFilter, expectedResults, result;
        componentManager.initialize();
        activeFilter = {
          url: 'foo/bar',
          includeIfStringMatches: 'baz'
        };
        expectedResults = {
          url: 'foo/bar',
          includeIfStringMatches: 'baz',
          hasToMatchString: void 0,
          cantMatchString: void 0
        };
        componentManager.refresh(activeFilter);
        result = componentManager.getActiveFilter();
        return assert.deepEqual(result, expectedResults);
      });
    });
    describe('getConditions', function() {
      return it('return current conditions', function() {
        var globalCondition, result;
        componentManager.initialize();
        globalCondition = {
          foo: false,
          bar: true
        };
        componentManager.addConditions(globalCondition);
        result = componentManager.getConditions();
        return assert.deepEqual(result, globalCondition);
      });
    });
    describe('getComponentById', function() {
      return it('should get a JSON representation of the data for a specific component', function() {
        var components, expectedResults, result;
        componentManager.initialize();
        components = [
          {
            id: 'dummy-component',
            src: 'http://www.google.com'
          }, {
            id: 'dummy-component2',
            src: 'http://www.wikipedia.com'
          }
        ];
        expectedResults = {
          args: void 0,
          conditions: void 0,
          height: void 0,
          id: 'dummy-component',
          instance: void 0,
          maxShowCount: void 0,
          src: 'http://www.google.com'
        };
        componentManager.initialize();
        componentManager.addComponents(components);
        result = componentManager.getComponentById('dummy-component');
        return assert.deepEqual(result, expectedResults);
      });
    });
    describe('getInstanceById', function() {
      return it('should get a JSON representation of the data for one specific instance', function() {
        var expectedResults, instances, result;
        componentManager.initialize();
        instances = [
          {
            id: 'dummy-instance',
            componentId: 'dummy-component',
            targetName: 'body'
          }, {
            id: 'dummy-instance2',
            componentId: 'dummy-component2',
            targetName: 'body'
          }
        ];
        expectedResults = {
          id: 'dummy-instance',
          componentId: 'dummy-component',
          filterString: void 0,
          conditions: void 0,
          args: void 0,
          order: void 0,
          targetName: 'body',
          instance: void 0,
          showCount: 0,
          urlPattern: void 0,
          urlParams: void 0,
          urlParamsModel: void 0,
          reInstantiateOnUrlParamChange: false
        };
        componentManager.initialize();
        componentManager.addInstances(instances);
        result = componentManager.getInstanceById('dummy-instance');
        result.urlParamsModel = void 0;
        return assert.deepEqual(result, expectedResults);
      });
    });
    describe('getComponents', function() {
      return it('should return an array of all registered components', function() {
        var components, expectedResults, results;
        componentManager.initialize();
        components = [
          {
            id: 'dummy-component',
            src: 'http://www.google.com'
          }, {
            id: 'dummy-component2',
            src: 'http://www.wikipedia.com'
          }
        ];
        expectedResults = [
          {
            args: void 0,
            conditions: void 0,
            height: void 0,
            id: 'dummy-component',
            instance: void 0,
            maxShowCount: void 0,
            src: 'http://www.google.com'
          }, {
            args: void 0,
            conditions: void 0,
            height: void 0,
            id: 'dummy-component2',
            instance: void 0,
            maxShowCount: void 0,
            src: 'http://www.wikipedia.com'
          }
        ];
        componentManager.addComponents(components);
        results = componentManager.getComponents();
        return assert.deepEqual(results, expectedResults);
      });
    });
    describe('getInstances', function() {
      return it('should return all instances (even those not currently active)', function() {
        var expectedResults, i, instances, len, result, results;
        componentManager.initialize();
        instances = [
          {
            id: 'dummy-instance',
            componentId: 'dummy-component',
            targetName: 'body'
          }, {
            id: 'dummy-instance2',
            componentId: 'dummy-component2',
            targetName: 'body'
          }
        ];
        expectedResults = [
          {
            id: 'dummy-instance',
            componentId: 'dummy-component',
            filterString: void 0,
            conditions: void 0,
            args: void 0,
            order: void 0,
            targetName: 'body',
            instance: void 0,
            showCount: 0,
            urlPattern: void 0,
            urlParams: void 0,
            urlParamsModel: void 0,
            reInstantiateOnUrlParamChange: false
          }, {
            id: 'dummy-instance2',
            componentId: 'dummy-component2',
            filterString: void 0,
            conditions: void 0,
            args: void 0,
            order: void 0,
            targetName: 'body',
            instance: void 0,
            showCount: 0,
            urlPattern: void 0,
            urlParams: void 0,
            urlParamsModel: void 0,
            reInstantiateOnUrlParamChange: false
          }
        ];
        componentManager.addInstances(instances);
        results = componentManager.getInstances();
        for (i = 0, len = results.length; i < len; i++) {
          result = results[i];
          result.urlParamsModel = void 0;
        }
        return assert.deepEqual(results, expectedResults);
      });
    });
    return describe('getActiveInstances', function() {
      return it('should return all instances that mataches the current filter', function() {
        var activeFilter, components, instances, results;
        componentManager.initialize();
        activeFilter = {
          url: 'foo/bar'
        };
        components = [
          {
            id: 'dummy-component',
            src: 'http://www.google.com'
          }, {
            id: 'dummy-component2',
            src: 'http://www.wikipedia.com'
          }
        ];
        instances = [
          {
            id: 'dummy-instance',
            componentId: 'dummy-component',
            targetName: 'body',
            urlPattern: 'foo/:id'
          }, {
            id: 'dummy-instance2',
            componentId: 'dummy-component2',
            targetName: 'body',
            urlPattern: 'bar/:id'
          }
        ];
        componentManager.addComponents(components).addInstances(instances);
        componentManager.refresh(activeFilter);
        results = componentManager.getActiveInstances();
        assert.equal(results.length, 1);
        assert.equal(results[0].src, 'http://www.google.com');
        assert.equal(results[0].constructor.prototype.tagName, 'iframe');
        return assert.equal(results[0].constructor.prototype.className, 'vigor-component--iframe');
      });
    });
  });
  describe('private methods', function() {
    describe('_parse', function() {
      var parseComponentSettingsStub;
      parseComponentSettingsStub = void 0;
      beforeEach(function() {
        $('body').append('<div class="test"></div>');
        return parseComponentSettingsStub = sandbox.stub(componentManager, '_parseComponentSettings');
      });
      afterEach(function() {
        return $('.test').remove();
      });
      it('should call setContext and pass the $context from the passed settings (if it is defined)', function() {
        var $test, setContextSpy, settings;
        $test = $('.test');
        settings = {
          $context: $test
        };
        setContextSpy = sandbox.spy(componentManager, 'setContext');
        componentManager._parse(settings);
        return assert(setContextSpy.calledWith($test));
      });
      it('should call setContext and pass body as a jquery object $("body") if no $context is defined in the passed settings', function() {
        var $body, setContextSpy, settings;
        $body = $('body');
        settings = {
          someOtherSettings: 'something not related to setContext'
        };
        setContextSpy = sandbox.spy(componentManager, 'setContext');
        componentManager._parse(settings);
        return assert(setContextSpy.calledWith($body));
      });
      it('should call setComponentClassName with the componentClassName from the passed settings (if it is defined)', function() {
        var componentClassName, setComponentClassNameSpy, settings;
        componentClassName = 'dummy-component-class-name';
        settings = {
          componentClassName: componentClassName
        };
        setComponentClassNameSpy = sandbox.spy(componentManager, 'setComponentClassName');
        componentManager._parse(settings);
        return assert(setComponentClassNameSpy.calledWith(componentClassName));
      });
      it('should not call setComponentClassName if componentClassName is not defined in the settings object', function() {
        var setComponentClassNameSpy, settings;
        settings = {
          someOtherSettings: 'something not related to setComponentClassName'
        };
        setComponentClassNameSpy = sandbox.spy(componentManager, 'setComponentClassName');
        componentManager._parse(settings);
        return assert.equal(setComponentClassNameSpy.called, false);
      });
      it('should call setTargetPrefix with the targetPrefix from the passed settings (if it is defined)', function() {
        var setTargetPrefixSpy, settings, targetPrefix;
        targetPrefix = 'dummy-target-prefix';
        settings = {
          targetPrefix: targetPrefix
        };
        setTargetPrefixSpy = sandbox.spy(componentManager, 'setTargetPrefix');
        componentManager._parse(settings);
        return assert(setTargetPrefixSpy.calledWith(targetPrefix));
      });
      it('should not setTargetPrefix if targetPrefix is not defined in the settings object', function() {
        var setTargetPrefixSpy, settings;
        settings = {
          someOtherSettings: 'something not related to setTargetPrefix'
        };
        setTargetPrefixSpy = sandbox.spy(componentManager, 'setTargetPrefix');
        componentManager._parse(settings);
        return assert.equal(setTargetPrefixSpy.called, false);
      });
      it('should call _parseComponentSettings with the componentSettings from the passed settings (if it is defined)', function() {
        var componentSettings, settings;
        componentSettings = {
          components: [
            {
              id: "filter-condition-component",
              src: "app.components.FilterComponent"
            }
          ]
        };
        settings = {
          componentSettings: componentSettings
        };
        componentManager._parse(settings);
        return assert(parseComponentSettingsStub.calledWith, componentSettings);
      });
      it('should call _parseComponentSettings with settings if componentSettings is not defined in the settings object', function() {
        var settings;
        settings = {
          someOtherSettings: 'something not related to _parseComponentSettings'
        };
        componentManager._parse(settings);
        return assert(parseComponentSettingsStub.calledWith(settings));
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager._parse();
        return assert.equal(cm, componentManager);
      });
    });
    describe('_parseComponentSettings', function() {
      it('should call addConditions with passed conditions and silent set to true, if conditions are defined (and is an object that is not empty) in the passed componentSettings object', function() {
        var addComponentsStub, componentSettings, conditions, silent;
        addComponentsStub = sandbox.stub(componentManager, 'addConditions');
        conditions = {
          foo: true
        };
        silent = true;
        componentSettings = {
          conditions: conditions
        };
        componentManager._parseComponentSettings(componentSettings);
        return assert(addComponentsStub.calledWith(conditions, silent));
      });
      it('should not call addConditions if passed conditions is not an object', function() {
        var addComponentsStub, componentSettings;
        addComponentsStub = sandbox.stub(componentManager, 'addConditions');
        componentSettings = {
          conditions: 'string'
        };
        componentManager._parseComponentSettings(componentSettings);
        return assert.equal(addComponentsStub.called, false);
      });
      it('should not call addConditions if passed conditions is an empty object', function() {
        var addComponentsStub, componentSettings;
        addComponentsStub = sandbox.stub(componentManager, 'addConditions');
        componentSettings = {
          conditions: {}
        };
        componentManager._parseComponentSettings(componentSettings);
        return assert.equal(addComponentsStub.called, false);
      });
      it('should not call _registerComponents if niether components, widgets or componentDefinitions are defined in componentSettings', function() {
        var componentSettings, registerComponentsStub;
        registerComponentsStub = sandbox.stub(componentManager, '_registerComponents');
        componentSettings = {
          someOtherSettings: 'something not related to _registerComponents'
        };
        componentManager._parseComponentSettings(componentSettings);
        return assert.equal(registerComponentsStub.called, false);
      });
      it('should not call _registerInstanceDefinitons if niether layoutsArray, targets, instanceDefinitions, instances are defined in componentSettings', function() {
        var componentSettings, registerInstanceDefinitionsStub;
        registerInstanceDefinitionsStub = sandbox.stub(componentManager, '_registerInstanceDefinitons');
        componentSettings = {
          someOtherSettings: 'something not related to _registerInstanceDefinitons'
        };
        componentManager._parseComponentSettings(componentSettings);
        return assert.equal(registerInstanceDefinitionsStub.called, false);
      });
      describe('should call _registerComponents', function() {
        var components, registerComponentsStub;
        registerComponentsStub = void 0;
        components = [
          {
            id: "filter-condition-component",
            src: "app.components.FilterComponent"
          }
        ];
        beforeEach(function() {
          return registerComponentsStub = sandbox.stub(componentManager, '_registerComponents');
        });
        it('if components are defined in the componentSettings object', function() {
          var componentSettings;
          componentSettings = {
            components: components
          };
          componentManager._parseComponentSettings(componentSettings);
          return assert(registerComponentsStub.calledWith(components));
        });
        it('or if widgets are defined in the componentSettings object', function() {
          var componentSettings;
          componentSettings = {
            widgets: components
          };
          componentManager._parseComponentSettings(componentSettings);
          return assert(registerComponentsStub.calledWith(components));
        });
        return it('or if componentDefinitions are defined in the componentSettings object', function() {
          var componentSettings;
          componentSettings = {
            componentDefinitions: components
          };
          componentManager._parseComponentSettings(componentSettings);
          return assert(registerComponentsStub.calledWith(components));
        });
      });
      describe('should call _registerInstanceDefinitons', function() {
        var instanceDefinitions, registerInstanceDefinitionsStub;
        registerInstanceDefinitionsStub = void 0;
        instanceDefinitions = [
          {
            id: "instance-1",
            componentId: "dummy-component"
          }
        ];
        beforeEach(function() {
          return registerInstanceDefinitionsStub = sandbox.stub(componentManager, '_registerInstanceDefinitons');
        });
        it('if layoutsArray is defined in the componentSettings object', function() {
          var componentSettings;
          componentSettings = {
            layoutsArray: instanceDefinitions
          };
          componentManager._parseComponentSettings(componentSettings);
          return assert(registerInstanceDefinitionsStub.calledWith(instanceDefinitions));
        });
        it('or if targets are defined in the componentSettings object', function() {
          var componentSettings;
          componentSettings = {
            targets: instanceDefinitions
          };
          componentManager._parseComponentSettings(componentSettings);
          return assert(registerInstanceDefinitionsStub.calledWith(instanceDefinitions));
        });
        it('or if instanceDefinitions are defined in the componentSettings object', function() {
          var componentSettings;
          componentSettings = {
            instanceDefinitions: instanceDefinitions
          };
          componentManager._parseComponentSettings(componentSettings);
          return assert(registerInstanceDefinitionsStub.calledWith(instanceDefinitions));
        });
        return it('or if instances are defined in the componentSettings object', function() {
          var componentSettings;
          componentSettings = {
            instances: instanceDefinitions
          };
          componentManager._parseComponentSettings(componentSettings);
          return assert(registerInstanceDefinitionsStub.calledWith(instanceDefinitions));
        });
      });
      return it('should return the componentManager for chainability', function() {
        var cm;
        cm = componentManager._parseComponentSettings({});
        return assert.equal(cm, componentManager);
      });
    });
    describe('_registerComponents', function() {
      return it('should', function() {});
    });
    describe('_registerInstanceDefinitons', function() {
      return it('should', function() {});
    });
    describe('_previousElement', function() {
      return it('should', function() {});
    });
    describe('_updateActiveComponents', function() {
      return it('should', function() {});
    });
    describe('_filterInstanceDefinitions', function() {
      return it('should', function() {});
    });
    describe('_filterInstanceDefinitionsByShowCount', function() {
      return it('should', function() {});
    });
    describe('_filterInstanceDefinitionsByComponentConditions', function() {
      return it('should', function() {});
    });
    describe('_addInstanceToModel', function() {
      return it('should', function() {});
    });
    describe('_tryToReAddStraysToDom', function() {
      return it('should', function() {});
    });
    describe('_addInstanceToDom', function() {
      return it('should', function() {});
    });
    describe('_addInstanceInOrder', function() {
      return it('should', function() {});
    });
    describe('_isComponentAreaEmpty', function() {
      return it('should', function() {});
    });
    return describe('_serialize', function() {
      return it('should', function() {});
    });
  });
  return describe('callbacks', function() {
    describe('_onActiveInstanceAdd', function() {
      return it('should', function() {});
    });
    describe('_onActiveInstanceChange', function() {
      return it('should', function() {});
    });
    describe('_onActiveInstanceRemoved', function() {
      return it('should', function() {});
    });
    describe('_onActiveInstanceOrderChange', function() {
      return it('should', function() {});
    });
    return describe('_onActiveInstanceTargetNameChange', function() {
      return it('should', function() {});
    });
  });
});
